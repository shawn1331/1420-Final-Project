@page "/"
@using Hangman.Logic
@using System.Text.Json

<PageTitle>Welcome to Hangman</PageTitle>

<h1>Hangman Lobby</h1>
@if (Lobby.OpenGames.Any())
{
    <h3>Choose An Open Game</h3>
    <ul>
        @foreach (var name in Lobby.OpenGames)
        {
            var game = Lobby.GetGame(name);
            string players = $"{game?.Player1?.Name ?? "[Open]"} vs {game?.Player2?.Name ?? "[Open]"}";
            <li>
                <a href="/game/@name/">@name (@players)</a>
            </li>
        }
    </ul>
}

<h3>Create A New Game</h3>
<input @bind=newGameName /> <button @onclick=createGame>Create Game</button>

@if (Lobby.ActiveGames.Any())
{
    <h3>Active Games</h3>
    <table style="width: 100%;" border>
        <thead>
            <tr>
                <th></th>
                <th colspan="2">Player 1</th>
                <th colspan="2">Player 2</th>
            </tr>
            <tr>
                <th>Game Name</th>
                <th>Name</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activeGame in Lobby.ActiveGames)
            {
                <tr>
                    <td>@activeGame.Name</td>
                    <td>@activeGame.Game.Player1?.Name</td>
                    <td>@activeGame.Game.Player2?.Name</td>
                </tr>
            }
        </tbody>
    </table>
}


<hr />

<div class="scoreboard">
    <h2>Score Board</h2>
    <table class="scoreboard-table">
        <thead>
            <tr>
                <th>Player Name</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @if (topTen.Count() > 0 && topTen != null)
            {
                @foreach (var score in topTen)
                {
                    <tr>
                        <td>@score.Name</td>
                        <td>@score.Score</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2" style="text-align: center;">No scores available</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {

    string newGameName;

    List<ScoreBoard> scores;
    IEnumerable<(string Name, int Score)> topTen;

    void createGame()
    {
        bool result = Lobby.CreateGame(newGameName, Game.SelectWordToGuess());
        newGameName = null;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Lobby.LobbyChanged += () => InvokeAsync(StateHasChanged);
        scores = Lobby.Storage.GetScoreBoard();
        topTen = scores.OrderByDescending(s => s.Score).Select(s => (s.Name, s.Score)).Take(10);
    }
}
