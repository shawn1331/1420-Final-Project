@page "/play/{GameName}"
@using Hangman.Logic
@inject NavigationManager navManager
@using System.Text.Json
@using Microsoft.AspNetCore

<PageTitle>Hangman</PageTitle>

@if (playerMe == null)
{
    <p>Player joining game...</p>
}
else if(playerOther == null)
{
    <p>Waiting for the opponent to join...</p>
}
else if(game == null)
{
     <p>Finding game...</p>
   
}
else if (!playerMe.Word.CompletelyGuessed() && !playerMe.PlayerHasGuesses() &&
         !playerOther.Word.CompletelyGuessed() && !playerOther.PlayerHasGuesses())
{
    <h3>Game Over!</h3>
    if (playerMe.Score == playerOther.Score)
    {
        <p>It's A Tie!</p>
    }
    else if (playerMe == game?.Player1 && game?.Player1?.Score > game?.Player2?.Score ||
             playerMe == game?.Player2 && game?.Player2?.Score > game?.Player1?.Score)
    {
        <p>You Win @playerMe.Name!</p>
    }
    else
    {
        <p>You Lose @playerMe.Name!</p>
    }
        scores.Add(new ScoreBoard(game.Player1.Name, game.Player1.Score));
        scores.Add(new ScoreBoard(game.Player2.Name, game.Player2.Score));
        string json = JsonSerializer.Serialize(scores);
        File.WriteAllText(filePath,json);
}
else if (playerMe.Word.CompletelyGuessed() && playerOther.Word.CompletelyGuessed())
{
    <h3>Game Over!</h3>
    if ((playerMe == game?.Player1 && game?.Player1?.Score > game?.Player2?.Score) ||
        (playerMe == game?.Player2 && game?.Player2?.Score > game?.Player1?.Score))
    {
        <p>You Win @playerMe.Name!</p>
    }
    else
    {
        <p>You Lose @playerMe.Name!</p>
    }
        scores.Add(new ScoreBoard(game.Player1.Name, game.Player1.Score));
        scores.Add(new ScoreBoard(game.Player2.Name, game.Player2.Score));
        string json = JsonSerializer.Serialize(scores);
        File.WriteAllText(filePath,json);
}
else
{
    <div class="game-container">
        <div class="player-left">
            <h3>Player: @playerMe.Name</h3>
            <p>Score: @playerMe.Score</p>
            <img src="@getImagePath(playerMe)" alt="Hangman State" />
            <p>Word: @playerMe.Word.WordToGuess
            @foreach(char letter in playerMe.Word.GuessedLetters)
            {
             <span>@char.ToUpper(letter)</span> <span> </span>
            }
            </p>
            <br>
            <br>
            <p>Missed Guesses:
                @if(playerMe.IncorrectGuesses.Count > 0)
                {
                    @foreach(char letter in playerMe.IncorrectGuesses)
                    {
                        <span>@letter</span> <span> </span>
                    }
                }
            </p>
        </div>

        <div class="game-board">
            <h1>Make Your Guess!</h1>
            <p>Remaining Guesses: @playerMe.MaxMissedGuesses</p>
            <input type="text" @bind="guess" maxlength="1" placeholder="Guess Letter" />
            <button @onclick="() => playerMe.MakeGuess()">Check Guess</button>
            <br>
            @if(playerMe?.Word?.RemainingLetterCount <= playerMe?.Word?.WordToGuess?.Length - 4)
            {
                <input type="text" @bind="completeGuess" maxlength=  placeholder="Guess Word"/>
                <button @onclick="() => playerMe.MakeCompleteGuess()">Check Word Guessed</button>
            }@*null reference is saying this line?*@
        </div>

        <div class="player-right">
            <h3>Opponent: @playerOther?.Name</h3>
            <p>Score: @playerOther?.Score</p>
            <img src="@getImagePath(playerOther)" alt="Hangman State" />
            <p>Word Progress: @playerOther.Word.WordToGuess
                @foreach(char letter in playerOther?.Word?.GuessedLetters)
                {
                    @if(letter == '_')
                    {
                        <span>_ </span>
                    }
                    else
                    {
                        <span>? </span>
                    } 
                }
            </p>
            <br>
            <br>
            <p> Missed Guesses:
                @if (playerOther?.IncorrectGuesses?.Count > 0)
                {
                    @foreach(char letter in playerOther.IncorrectGuesses)
                    {
                        <span>? </span>
                    }
                }
            </p>
        </div>
    </div>
}




@code {
    [Parameter]
    public string? GameName { get; set; }

    Player? playerMe;
    Player? playerOther;
    Game? game;

    [SupplyParameterFromQuery]
    public string? PlayerName { get; set; }
    string? guess;
    string? completeGuess;
    List<ScoreBoard> scores = new();
    const string filePath = "/wwwroot/data/scoreboard.json";

    protected override void OnParametersSet()
    {
        game = Lobby.GetGame(GameName);

        if (game == null)
            navManager.NavigateTo("/");

        if (game?.Player1?.Name == PlayerName)
            playerMe = game?.Player1;

        else if (game?.Player2?.Name == PlayerName)
            playerMe = game?.Player2;

        playerMe.GetGuess = makeGuess;
        playerMe.GetCompleteGuess = makeCompleteGuess;
        
        playerOther = playerMe == game?.Player1 ? game?.Player2 : game?.Player1;

        game.GameStateChanged += handleGameStateChanged;
        playerMe.Word.WordHasChanged += () => InvokeAsync(StateHasChanged);
        playerMe.HangmanChanged += () => InvokeAsync(StateHasChanged);
        if(playerOther is not null)
        playerOther.Word.WordHasChanged += () => InvokeAsync(StateHasChanged);
    }

    char makeGuess()
    {
        if (playerMe.Word.CheckGuess(guess[0]))
        {
            playerMe.UpdateScore(5 * playerMe.Word.NumberOfGuessedLetters);
        }
        else
        {
            playerMe.AddToMissedGuesses(guess[0]);
        }
        @* player.Word.WordHasChanged += () => InvokeAsync(StateHasChanged); *@
        char newGuess = guess[0];
        guess = string.Empty;
        return newGuess;
    }

    string makeCompleteGuess()
    {
        int remainingLetterCount = playerMe.Word.RemainingLetterCount;
        if (playerMe.Word.CheckCompleteGuess(completeGuess))
        {
            playerMe.UpdateScore(remainingLetterCount * 10);
        }
        else
        {
            playerMe.RemoveAGuess();
        }
        string newCompleteGuess = completeGuess;
        completeGuess = string.Empty;
        return newCompleteGuess;
    }

    void handleGameStateChanged()
    {
        if (playerOther == null)
            playerOther = playerMe == game.Player1 ? game.Player2 : game.Player1;

        playerOther.HangmanChanged += () => InvokeAsync(StateHasChanged);
        playerOther.Word.WordHasChanged += () => InvokeAsync(StateHasChanged);
        InvokeAsync(StateHasChanged);

        game.GameReset += () => navManager.NavigateTo("/");

    }

    void playAgain()
    {
        game.ResetGameState(Game.SelectWordToGuess());
    }

    string getImagePath(Player player)
    {
        return player?.MaxMissedGuesses switch
        {
            6 => "/hang0.bmp",
            5 => "/hang1.bmp",
            4 => "/hang2.bmp",
            3 => "/hang3.bmp",
            2 => "/hang4.bmp",
            1 => "/hang5.bmp",
            0 => "/hang6.bmp",
            _ => throw new ArgumentException($"Invalid number of missed guesses {player?.MaxMissedGuesses}")
        };
    }
}