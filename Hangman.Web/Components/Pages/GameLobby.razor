@page "/game/{GameName}"
@using Hangman.Logic
@inject NavigationManager navManager

<PageTitle> @GameName -- Hangman</PageTitle>

<h1>Game Name: @GameName</h1>

@if (game.Player2 == null)
{
    <input @bind=newPlayerName placeholder="Your Name" />
    <button @onclick=joinGame>Join Game</button>
}

else
{
    <p> Sorry Looks Like This Game Is Already Full</p>
    <p> @game.Player1.Name Is Playing @game.Player2.Name</p>
}






@code {

    [Parameter]
    public string? GameName { get; set; }
    string? newPlayerName;
    Game? game = new();
    string word { get; set; } = Game.SelectWordToGuess();

    void joinGame()
    {
        game.Join(new HumanPlayer(newPlayerName, GetUserGuess, GetUsersCompleteGuess, GetUserInput));
        navManager.NavigateTo($"/play/{GameName}/?playername={newPlayerName}");
    }

    protected override void OnParametersSet()
    {
        game = Lobby.GetGame(GameName);
        game.GameStateChanged += () => InvokeAsync(StateHasChanged);
    }

    static char GetUserGuess()
    {
        throw new InvalidOperationException($"Get user guess not properly set after lobby");
    }

    static string GetUsersCompleteGuess()
    {
        throw new InvalidOperationException($"Get users complete guess not properly set after lobby");
    }

    static char GetUserInput()
    {
        throw new InvalidOperationException($"Get user input not properly set after lobby");
    }
}